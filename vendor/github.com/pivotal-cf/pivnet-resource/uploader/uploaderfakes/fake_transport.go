// This file was generated by counterfeiter
package uploaderfakes

import "sync"

type FakeTransport struct {
	UploadStub        func(fileGlob string, filepathPrefix string, sourcesDir string) error
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		fileGlob       string
		filepathPrefix string
		sourcesDir     string
	}
	uploadReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTransport) Upload(fileGlob string, filepathPrefix string, sourcesDir string) error {
	fake.uploadMutex.Lock()
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		fileGlob       string
		filepathPrefix string
		sourcesDir     string
	}{fileGlob, filepathPrefix, sourcesDir})
	fake.recordInvocation("Upload", []interface{}{fileGlob, filepathPrefix, sourcesDir})
	fake.uploadMutex.Unlock()
	if fake.UploadStub != nil {
		return fake.UploadStub(fileGlob, filepathPrefix, sourcesDir)
	} else {
		return fake.uploadReturns.result1
	}
}

func (fake *FakeTransport) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeTransport) UploadArgsForCall(i int) (string, string, string) {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.uploadArgsForCall[i].fileGlob, fake.uploadArgsForCall[i].filepathPrefix, fake.uploadArgsForCall[i].sourcesDir
}

func (fake *FakeTransport) UploadReturns(result1 error) {
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransport) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTransport) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
