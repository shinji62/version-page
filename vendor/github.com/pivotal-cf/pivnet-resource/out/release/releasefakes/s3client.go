// This file was generated by counterfeiter
package releasefakes

import "sync"

type S3Client struct {
	UploadFileStub        func(string) (string, error)
	uploadFileMutex       sync.RWMutex
	uploadFileArgsForCall []struct {
		arg1 string
	}
	uploadFileReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *S3Client) UploadFile(arg1 string) (string, error) {
	fake.uploadFileMutex.Lock()
	fake.uploadFileArgsForCall = append(fake.uploadFileArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("UploadFile", []interface{}{arg1})
	fake.uploadFileMutex.Unlock()
	if fake.UploadFileStub != nil {
		return fake.UploadFileStub(arg1)
	} else {
		return fake.uploadFileReturns.result1, fake.uploadFileReturns.result2
	}
}

func (fake *S3Client) UploadFileCallCount() int {
	fake.uploadFileMutex.RLock()
	defer fake.uploadFileMutex.RUnlock()
	return len(fake.uploadFileArgsForCall)
}

func (fake *S3Client) UploadFileArgsForCall(i int) string {
	fake.uploadFileMutex.RLock()
	defer fake.uploadFileMutex.RUnlock()
	return fake.uploadFileArgsForCall[i].arg1
}

func (fake *S3Client) UploadFileReturns(result1 string, result2 error) {
	fake.UploadFileStub = nil
	fake.uploadFileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *S3Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.uploadFileMutex.RLock()
	defer fake.uploadFileMutex.RUnlock()
	return fake.invocations
}

func (fake *S3Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
