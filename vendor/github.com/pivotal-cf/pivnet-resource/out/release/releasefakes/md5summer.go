// This file was generated by counterfeiter
package releasefakes

import "sync"

type Md5Summer struct {
	SumFileStub        func(filepath string) (string, error)
	sumFileMutex       sync.RWMutex
	sumFileArgsForCall []struct {
		filepath string
	}
	sumFileReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Md5Summer) SumFile(filepath string) (string, error) {
	fake.sumFileMutex.Lock()
	fake.sumFileArgsForCall = append(fake.sumFileArgsForCall, struct {
		filepath string
	}{filepath})
	fake.recordInvocation("SumFile", []interface{}{filepath})
	fake.sumFileMutex.Unlock()
	if fake.SumFileStub != nil {
		return fake.SumFileStub(filepath)
	} else {
		return fake.sumFileReturns.result1, fake.sumFileReturns.result2
	}
}

func (fake *Md5Summer) SumFileCallCount() int {
	fake.sumFileMutex.RLock()
	defer fake.sumFileMutex.RUnlock()
	return len(fake.sumFileArgsForCall)
}

func (fake *Md5Summer) SumFileArgsForCall(i int) string {
	fake.sumFileMutex.RLock()
	defer fake.sumFileMutex.RUnlock()
	return fake.sumFileArgsForCall[i].filepath
}

func (fake *Md5Summer) SumFileReturns(result1 string, result2 error) {
	fake.SumFileStub = nil
	fake.sumFileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Md5Summer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sumFileMutex.RLock()
	defer fake.sumFileMutex.RUnlock()
	return fake.invocations
}

func (fake *Md5Summer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
