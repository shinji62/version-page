// This file was generated by counterfeiter
package outfakes

import (
	"sync"

	go_pivnet "github.com/pivotal-cf/go-pivnet"
)

type ReleaseDependenciesAdder struct {
	AddReleaseDependenciesStub        func(release go_pivnet.Release) error
	addReleaseDependenciesMutex       sync.RWMutex
	addReleaseDependenciesArgsForCall []struct {
		release go_pivnet.Release
	}
	addReleaseDependenciesReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseDependenciesAdder) AddReleaseDependencies(release go_pivnet.Release) error {
	fake.addReleaseDependenciesMutex.Lock()
	fake.addReleaseDependenciesArgsForCall = append(fake.addReleaseDependenciesArgsForCall, struct {
		release go_pivnet.Release
	}{release})
	fake.recordInvocation("AddReleaseDependencies", []interface{}{release})
	fake.addReleaseDependenciesMutex.Unlock()
	if fake.AddReleaseDependenciesStub != nil {
		return fake.AddReleaseDependenciesStub(release)
	} else {
		return fake.addReleaseDependenciesReturns.result1
	}
}

func (fake *ReleaseDependenciesAdder) AddReleaseDependenciesCallCount() int {
	fake.addReleaseDependenciesMutex.RLock()
	defer fake.addReleaseDependenciesMutex.RUnlock()
	return len(fake.addReleaseDependenciesArgsForCall)
}

func (fake *ReleaseDependenciesAdder) AddReleaseDependenciesArgsForCall(i int) go_pivnet.Release {
	fake.addReleaseDependenciesMutex.RLock()
	defer fake.addReleaseDependenciesMutex.RUnlock()
	return fake.addReleaseDependenciesArgsForCall[i].release
}

func (fake *ReleaseDependenciesAdder) AddReleaseDependenciesReturns(result1 error) {
	fake.AddReleaseDependenciesStub = nil
	fake.addReleaseDependenciesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseDependenciesAdder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addReleaseDependenciesMutex.RLock()
	defer fake.addReleaseDependenciesMutex.RUnlock()
	return fake.invocations
}

func (fake *ReleaseDependenciesAdder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
