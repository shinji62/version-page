// This file was generated by counterfeiter
package downloaderfakes

import (
	"io"
	"sync"
)

type FakeExtendedClient struct {
	DownloadFileStub        func(writer io.Writer, downloadLink string) error
	downloadFileMutex       sync.RWMutex
	downloadFileArgsForCall []struct {
		writer       io.Writer
		downloadLink string
	}
	downloadFileReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExtendedClient) DownloadFile(writer io.Writer, downloadLink string) error {
	fake.downloadFileMutex.Lock()
	fake.downloadFileArgsForCall = append(fake.downloadFileArgsForCall, struct {
		writer       io.Writer
		downloadLink string
	}{writer, downloadLink})
	fake.recordInvocation("DownloadFile", []interface{}{writer, downloadLink})
	fake.downloadFileMutex.Unlock()
	if fake.DownloadFileStub != nil {
		return fake.DownloadFileStub(writer, downloadLink)
	} else {
		return fake.downloadFileReturns.result1
	}
}

func (fake *FakeExtendedClient) DownloadFileCallCount() int {
	fake.downloadFileMutex.RLock()
	defer fake.downloadFileMutex.RUnlock()
	return len(fake.downloadFileArgsForCall)
}

func (fake *FakeExtendedClient) DownloadFileArgsForCall(i int) (io.Writer, string) {
	fake.downloadFileMutex.RLock()
	defer fake.downloadFileMutex.RUnlock()
	return fake.downloadFileArgsForCall[i].writer, fake.downloadFileArgsForCall[i].downloadLink
}

func (fake *FakeExtendedClient) DownloadFileReturns(result1 error) {
	fake.DownloadFileStub = nil
	fake.downloadFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeExtendedClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadFileMutex.RLock()
	defer fake.downloadFileMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeExtendedClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
